2. 3 collisions (503762, 644554, 648056)
3. 3 comparisons
4. 2 comparisons. Could be reduced to 1 if search method has a condition where it will only traverse the linked list if the current Node being compared has its next link != null.
5. n-comparisons, for n-inserted keys.
   The worst-case scenario in finding a key would be if the hashing function generated the same position for all inserted keys; the algorithm would need to traverse the whole linked list in case that the key to-be-searched would be the last one attached to it.
6. False: the number of collisions would remain the same if the same hashing function is being used, even if the table's size were to be increased.
   In fact, the 3 additional positions wouldn't even be used (nor the original's last position, if the hash-table's size is 11), given that MOD 10 can only generate indexes ranging from [0, 9]
7. False: there must be at least 1 comparison made when looking for a key, even if a perfect hashing function is being used.
8. False for the array index in which the key will be inserted, True for the order in which the node will be inserted into the linked list.
9. The index generated by the hashing function when inserting a key does not depend on the order in which said key has been inserted compared to the rest of the keys, given that it is only dependent on the sum of the product of the key's last two and first two digits, respectively;
   however, depending on the algorithm's design, a recently inserted Node will be placed either closer or further away from its linked list's root than an older entry.
10. True